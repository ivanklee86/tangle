# https://taskfile.dev

version: '3'

vars:
  BUILD_DIR: bin
  TEST_REPORT: tests.xml
  COVERAGE_RAW: coverage.out
  COVERAGE_REPORT: coverage.html
  VERSION: "Task"

env:
  TANGLE_CONFIG_PATH: "./integration/tangle.yaml"

tasks:
  install:
    desc: Installs Golang dependencies and testing tools.
    cmds:
      - go get ./...

  install-ci:
    desc: Install packages and CI/CD tools.
    cmds:
      - task: install
      - go install github.com/jstemmer/go-junit-report/v2@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/hairyhenderson/gomplate/v4/cmd/gomplate@latest
      - go install github.com/go-swagger/go-swagger/cmd/swagger@latest

  build:
    desc: Builds binary.
    cmds:
      - task: generate
      - mkdir {{.BUILD_DIR}} | true
      - go build -ldflags "-X main.version=${VERSION}" -o {{.BUILD_DIR}} ./...

  generate:
    desc: Generate code.
    cmds:
      - swagger generate spec -o ./internal/tangle/swagger.json --scan-models

  fmt:
    desc: Formats Golang code.
    cmds:
      - go fmt $(go list ./...)

  lint:
    desc: Lints Golang code.
    cmds:
      - golangci-lint run --timeout 5m

  run:
    desc: Run server
    cmds:
      - task: generate
      - go run cmd/tangle-server/main.go

  run:reloading:
    desc: Run server with hot reloading.
    cmds:
      - task: generate
      - air -c .air.conf

  test:
    desc: Run Golang tests.
    cmds:
      - go test -v ./... 2>&1

  test-ci:
    desc: Run Golang tests and generate coverage report.
    cmds:
      - go test --coverprofile {{.COVERAGE_RAW}} -v ./... 2>&1  | tee >(go-junit-report > report.xml)
      - go tool cover -html={{.COVERAGE_RAW}} -o {{.COVERAGE_REPORT}}
